#define _USE_MATH_DEFINES

#include <iostream>
#include <fstream>
#include <complex>
#include <vector>
#include <cmath>
#include <string>

using namespace std;

#define N_WAVE      4096    /* full length of Sinewave[] */ // 1024 changed to 4096
#define LOG2_N_WAVE 12      /* log2(N_WAVE) */ // 10 changed to 12

short Sinewave[N_WAVE - N_WAVE / 4] = {
	0,	0,	0,	0,	0,	0,	1,	1,	1,
1,	1,	2,	2,	2,	2,	2,	3,
3,	3,	3,	3,	4,	4,	4,	4,
4,	5,	5,	5,	5,	5,	6,	6,
6,	6,	6,	7,	7,	7,	7,	7,
8,	8,	8,	8,	8,	9,	9,	9,
9,	9,	10,	10,	10,	10,	10,	10,
11,	11,	11,	11,	11,	12,	12,	12,
12,	12,	13,	13,	13,	13,	13,	14,
14,	14,	14,	14,	15,	15,	15,	15,
15,	16,	16,	16,	16,	16,	17,	17,
17,	17,	17,	18,	18,	18,	18,	18,
18,	19,	19,	19,	19,	19,	20,	20,
20,	20,	20,	21,	21,	21,	21,	21,
22,	22,	22,	22,	22,	23,	23,	23,
23,	23,	24,	24,	24,	24,	24,	24,
25,	25,	25,	25,	25,	26,	26,	26,
26,	26,	27,	27,	27,	27,	27,	28,
28,	28,	28,	28,	29,	29,	29,	29,
29,	29,	30,	30,	30,	30,	30,	31,
31,	31,	31,	31,	32,	32,	32,	32,
32,	33,	33,	33,	33,	33,	33,	34,
34,	34,	34,	34,	35,	35,	35,	35,
35,	36,	36,	36,	36,	36,	36,	37,
37,	37,	37,	37,	38,	38,	38,	38,
38,	39,	39,	39,	39,	39,	39,	40,
40,	40,	40,	40,	41,	41,	41,	41,
41,	42,	42,	42,	42,	42,	42,	43,
43,	43,	43,	43,	44,	44,	44,	44,
44,	44,	45,	45,	45,	45,	45,	46,
46,	46,	46,	46,	47,	47,	47,	47,
47,	47,	48,	48,	48,	48,	48,	49,
49,	49,	49,	49,	49,	50,	50,	50,
50,	50,	50,	51,	51,	51,	51,	51,
52,	52,	52,	52,	52,	52,	53,	53,
53,	53,	53,	54,	54,	54,	54,	54,
54,	55,	55,	55,	55,	55,	55,	56,
56,	56,	56,	56,	57,	57,	57,	57,
57,	57,	58,	58,	58,	58,	58,	58,
59,	59,	59,	59,	59,	60,	60,	60,
60,	60,	60,	61,	61,	61,	61,	61,
61,	62,	62,	62,	62,	62,	62,	63,
63,	63,	63,	63,	63,	64,	64,	64,
64,	64,	64,	65,	65,	65,	65,	65,
66,	66,	66,	66,	66,	66,	67,	67,
67,	67,	67,	67,	68,	68,	68,	68,
68,	68,	69,	69,	69,	69,	69,	69,
69,	70,	70,	70,	70,	70,	70,	71,
71,	71,	71,	71,	71,	72,	72,	72,
72,	72,	72,	73,	73,	73,	73,	73,
73,	74,	74,	74,	74,	74,	74,	75,
75,	75,	75,	75,	75,	75,	76,	76,
76,	76,	76,	76,	77,	77,	77,	77,
77,	77,	78,	78,	78,	78,	78,	78,
78,	79,	79,	79,	79,	79,	79,	80,
80,	80,	80,	80,	80,	80,	81,	81,
81,	81,	81,	81,	81,	82,	82,	82,
82,	82,	82,	83,	83,	83,	83,	83,
83,	83,	84,	84,	84,	84,	84,	84,
84,	85,	85,	85,	85,	85,	85,	85,
86,	86,	86,	86,	86,	86,	87,	87,
87,	87,	87,	87,	87,	88,	88,	88,
88,	88,	88,	88,	89,	89,	89,	89,
89,	89,	89,	89,	90,	90,	90,	90,
90,	90,	90,	91,	91,	91,	91,	91,
91,	91,	92,	92,	92,	92,	92,	92,
92,	93,	93,	93,	93,	93,	93,	93,
93,	94,	94,	94,	94,	94,	94,	94,
95,	95,	95,	95,	95,	95,	95,	95,
96,	96,	96,	96,	96,	96,	96,	96,
97,	97,	97,	97,	97,	97,	97,	97,
98,	98,	98,	98,	98,	98,	98,	98,
99,	99,	99,	99,	99,	99,	99,	99,
100,	100,	100,	100,	100,	100,	100,	100,
101,	101,	101,	101,	101,	101,	101,	101,
102,	102,	102,	102,	102,	102,	102,	102,
102,	103,	103,	103,	103,	103,	103,	103,
103,	104,	104,	104,	104,	104,	104,	104,
104,	104,	105,	105,	105,	105,	105,	105,
105,	105,	105,	106,	106,	106,	106,	106,
106,	106,	106,	106,	107,	107,	107,	107,
107,	107,	107,	107,	107,	107,	108,	108,
108,	108,	108,	108,	108,	108,	108,	109,
109,	109,	109,	109,	109,	109,	109,	109,
109,	110,	110,	110,	110,	110,	110,	110,
110,	110,	110,	111,	111,	111,	111,	111,
111,	111,	111,	111,	111,	111,	112,	112,
112,	112,	112,	112,	112,	112,	112,	112,
113,	113,	113,	113,	113,	113,	113,	113,
113,	113,	113,	114,	114,	114,	114,	114,
114,	114,	114,	114,	114,	114,	114,	115,
115,	115,	115,	115,	115,	115,	115,	115,
115,	115,	115,	116,	116,	116,	116,	116,
116,	116,	116,	116,	116,	116,	116,	117,
117,	117,	117,	117,	117,	117,	117,	117,
117,	117,	117,	117,	118,	118,	118,	118,
118,	118,	118,	118,	118,	118,	118,	118,
118,	119,	119,	119,	119,	119,	119,	119,
119,	119,	119,	119,	119,	119,	119,	120,
120,	120,	120,	120,	120,	120,	120,	120,
120,	120,	120,	120,	120,	120,	120,	121,
121,	121,	121,	121,	121,	121,	121,	121,
121,	121,	121,	121,	121,	121,	121,	122,
122,	122,	122,	122,	122,	122,	122,	122,
122,	122,	122,	122,	122,	122,	122,	122,
123,	123,	123,	123,	123,	123,	123,	123,
123,	123,	123,	123,	123,	123,	123,	123,
123,	123,	123,	123,	124,	124,	124,	124,
124,	124,	124,	124,	124,	124,	124,	124,
124,	124,	124,	124,	124,	124,	124,	124,
124,	124,	125,	125,	125,	125,	125,	125,
125,	125,	125,	125,	125,	125,	125,	125,
125,	125,	125,	125,	125,	125,	125,	125,
125,	125,	125,	125,	126,	126,	126,	126,
126,	126,	126,	126,	126,	126,	126,	126,
126,	126,	126,	126,	126,	126,	126,	126,
126,	126,	126,	126,	126,	126,	126,	126,
126,	126,	126,	126,	126,	127,	127,	127,
127,	127,	127,	127,	127,	127,	127,	127,
127,	127,	127,	127,	127,	127,	127,	127,
127,	127,	127,	127,	127,	127,	127,	127,
127,	127,	127,	127,	127,	127,	127,	127,
127,	127,	127,	127,	127,	127,	127,	127,
127,	127,	127,	127,	127,	127,	127,	127,
127,	127,	127,	127,	127,	127,	127,	127,
127,	127,	127,	127,	127,	127,	127,	127,
127,	127,	127,	127,	127,	127,	127,	127,
127,	127,	127,	127,	127,	127,	127,	127,
127,	127,	127,	127,	127,	127,	127,	127,
127,	127,	127,	127,	127,	127,	127,	127,
127,	127,	127,	127,	127,	127,	127,	127,
127,	127,	127,	127,	127,	127,	127,	127,
127,	127,	127,	127,	127,	127,	127,	127,
127,	127,	127,	127,	127,	127,	127,	127,
127,	127,	127,	127,	127,	127,	127,	127,
127,	127,	127,	127,	127,	127,	127,	127,
127,	127,	127,	127,	127,	127,	127,	127,
127,	127,	127,	127,	127,	127,	127,	127,
127,	126,	126,	126,	126,	126,	126,	126,
126,	126,	126,	126,	126,	126,	126,	126,
126,	126,	126,	126,	126,	126,	126,	126,
126,	126,	126,	126,	126,	126,	126,	126,
126,	126,	125,	125,	125,	125,	125,	125,
125,	125,	125,	125,	125,	125,	125,	125,
125,	125,	125,	125,	125,	125,	125,	125,
125,	125,	125,	125,	124,	124,	124,	124,
124,	124,	124,	124,	124,	124,	124,	124,
124,	124,	124,	124,	124,	124,	124,	124,
124,	124,	123,	123,	123,	123,	123,	123,
123,	123,	123,	123,	123,	123,	123,	123,
123,	123,	123,	123,	123,	123,	122,	122,
122,	122,	122,	122,	122,	122,	122,	122,
122,	122,	122,	122,	122,	122,	122,	121,
121,	121,	121,	121,	121,	121,	121,	121,
121,	121,	121,	121,	121,	121,	121,	120,
120,	120,	120,	120,	120,	120,	120,	120,
120,	120,	120,	120,	120,	120,	120,	119,
119,	119,	119,	119,	119,	119,	119,	119,
119,	119,	119,	119,	119,	118,	118,	118,
118,	118,	118,	118,	118,	118,	118,	118,
118,	118,	117,	117,	117,	117,	117,	117,
117,	117,	117,	117,	117,	117,	117,	116,
116,	116,	116,	116,	116,	116,	116,	116,
116,	116,	116,	115,	115,	115,	115,	115,
115,	115,	115,	115,	115,	115,	115,	114,
114,	114,	114,	114,	114,	114,	114,	114,
114,	114,	114,	113,	113,	113,	113,	113,
113,	113,	113,	113,	113,	113,	112,	112,
112,	112,	112,	112,	112,	112,	112,	112,
111,	111,	111,	111,	111,	111,	111,	111,
111,	111,	111,	110,	110,	110,	110,	110,
110,	110,	110,	110,	110,	109,	109,	109,
109,	109,	109,	109,	109,	109,	109,	108,
108,	108,	108,	108,	108,	108,	108,	108,
107,	107,	107,	107,	107,	107,	107,	107,
107,	107,	106,	106,	106,	106,	106,	106,
106,	106,	106,	105,	105,	105,	105,	105,
105,	105,	105,	105,	104,	104,	104,	104,
104,	104,	104,	104,	104,	103,	103,	103,
103,	103,	103,	103,	103,	102,	102,	102,
102,	102,	102,	102,	102,	102,	101,	101,
101,	101,	101,	101,	101,	101,	100,	100,
100,	100,	100,	100,	100,	100,	99,	99,
99,	99,	99,	99,	99,	99,	98,	98,
98,	98,	98,	98,	98,	98,	97,	97,
97,	97,	97,	97,	97,	97,	96,	96,
96,	96,	96,	96,	96,	96,	95,	95,
95,	95,	95,	95,	95,	95,	94,	94,
94,	94,	94,	94,	94,	93,	93,	93,
93,	93,	93,	93,	93,	92,	92,	92,
92,	92,	92,	92,	91,	91,	91,	91,
91,	91,	91,	90,	90,	90,	90,	90,
90,	90,	89,	89,	89,	89,	89,	89,
89,	89,	88,	88,	88,	88,	88,	88,
88,	87,	87,	87,	87,	87,	87,	87,
86,	86,	86,	86,	86,	86,	85,	85,
85,	85,	85,	85,	85,	84,	84,	84,
84,	84,	84,	84,	83,	83,	83,	83,
83,	83,	83,	82,	82,	82,	82,	82,
82,	81,	81,	81,	81,	81,	81,	81,
80,	80,	80,	80,	80,	80,	80,	79,
79,	79,	79,	79,	79,	78,	78,	78,
78,	78,	78,	78,	77,	77,	77,	77,
77,	77,	76,	76,	76,	76,	76,	76,
75,	75,	75,	75,	75,	75,	75,	74,
74,	74,	74,	74,	74,	73,	73,	73,
73,	73,	73,	72,	72,	72,	72,	72,
72,	71,	71,	71,	71,	71,	71,	70,
70,	70,	70,	70,	70,	69,	69,	69,
69,	69,	69,	69,	68,	68,	68,	68,
68,	68,	67,	67,	67,	67,	67,	67,
66,	66,	66,	66,	66,	66,	65,	65,
65,	65,	65,	64,	64,	64,	64,	64,
64,	63,	63,	63,	63,	63,	63,	62,
62,	62,	62,	62,	62,	61,	61,	61,
61,	61,	61,	60,	60,	60,	60,	60,
60,	59,	59,	59,	59,	59,	58,	58,
58,	58,	58,	58,	57,	57,	57,	57,
57,	57,	56,	56,	56,	56,	56,	55,
55,	55,	55,	55,	55,	54,	54,	54,
54,	54,	54,	53,	53,	53,	53,	53,
52,	52,	52,	52,	52,	52,	51,	51,
51,	51,	51,	50,	50,	50,	50,	50,
50,	49,	49,	49,	49,	49,	49,	48,
48,	48,	48,	48,	47,	47,	47,	47,
47,	47,	46,	46,	46,	46,	46,	45,
45,	45,	45,	45,	44,	44,	44,	44,
44,	44,	43,	43,	43,	43,	43,	42,
42,	42,	42,	42,	42,	41,	41,	41,
41,	41,	40,	40,	40,	40,	40,	39,
39,	39,	39,	39,	39,	38,	38,	38,
38,	38,	37,	37,	37,	37,	37,	36,
36,	36,	36,	36,	36,	35,	35,	35,
35,	35,	34,	34,	34,	34,	34,	33,
33,	33,	33,	33,	33,	32,	32,	32,
32,	32,	31,	31,	31,	31,	31,	30,
30,	30,	30,	30,	29,	29,	29,	29,
29,	29,	28,	28,	28,	28,	28,	27,
27,	27,	27,	27,	26,	26,	26,	26,
26,	25,	25,	25,	25,	25,	24,	24,
24,	24,	24,	24,	23,	23,	23,	23,
23,	22,	22,	22,	22,	22,	21,	21,
21,	21,	21,	20,	20,	20,	20,	20,
19,	19,	19,	19,	19,	18,	18,	18,
18,	18,	18,	17,	17,	17,	17,	17,
16,	16,	16,	16,	16,	15,	15,	15,
15,	15,	14,	14,	14,	14,	14,	13,
13,	13,	13,	13,	12,	12,	12,	12,
12,	11,	11,	11,	11,	11,	10,	10,
10,	10,	10,	10,	9,	9,	9,	9,
9,	8,	8,	8,	8,	8,	7,	7,
7,	7,	7,	6,	6,	6,	6,	6,
5,	5,	5,	5,	5,	4,	4,	4,
4,	4,	3,	3,	3,	3,	3,	2,
2,	2,	2,	2,	1,	1,	1,	1,
1,	0,	0,	0,	0,	0,	0,	0,
0,	0,	0,	0,	-1,	-1,	-1,	-1,
-1,	-2,	-2,	-2,	-2,	-2,	-3,	-3,
-3,	-3,	-3,	-4,	-4,	-4,	-4,	-4,
-5,	-5,	-5,	-5,	-5,	-6,	-6,	-6,
-6,	-6,	-7,	-7,	-7,	-7,	-7,	-8,
-8,	-8,	-8,	-8,	-9,	-9,	-9,	-9,
-9,	-10,	-10,	-10,	-10,	-10,	-10,	-11,
-11,	-11,	-11,	-11,	-12,	-12,	-12,	-12,
-12,	-13,	-13,	-13,	-13,	-13,	-14,	-14,
-14,	-14,	-14,	-15,	-15,	-15,	-15,	-15,
-16,	-16,	-16,	-16,	-16,	-17,	-17,	-17,
-17,	-17,	-18,	-18,	-18,	-18,	-18,	-18,
-19,	-19,	-19,	-19,	-19,	-20,	-20,	-20,
-20,	-20,	-21,	-21,	-21,	-21,	-21,	-22,
-22,	-22,	-22,	-22,	-23,	-23,	-23,	-23,
-23,	-24,	-24,	-24,	-24,	-24,	-24,	-25,
-25,	-25,	-25,	-25,	-26,	-26,	-26,	-26,
-26,	-27,	-27,	-27,	-27,	-27,	-28,	-28,
-28,	-28,	-28,	-29,	-29,	-29,	-29,	-29,
-29,	-30,	-30,	-30,	-30,	-30,	-31,	-31,
-31,	-31,	-31,	-32,	-32,	-32,	-32,	-32,
-33,	-33,	-33,	-33,	-33,	-33,	-34,	-34,
-34,	-34,	-34,	-35,	-35,	-35,	-35,	-35,
-36,	-36,	-36,	-36,	-36,	-36,	-37,	-37,
-37,	-37,	-37,	-38,	-38,	-38,	-38,	-38,
-39,	-39,	-39,	-39,	-39,	-39,	-40,	-40,
-40,	-40,	-40,	-41,	-41,	-41,	-41,	-41,
-42,	-42,	-42,	-42,	-42,	-42,	-43,	-43,
-43,	-43,	-43,	-44,	-44,	-44,	-44,	-44,
-44,	-45,	-45,	-45,	-45,	-45,	-46,	-46,
-46,	-46,	-46,	-47,	-47,	-47,	-47,	-47,
-47,	-48,	-48,	-48,	-48,	-48,	-49,	-49,
-49,	-49,	-49,	-49,	-50,	-50,	-50,	-50,
-50,	-50,	-51,	-51,	-51,	-51,	-51,	-52,
-52,	-52,	-52,	-52,	-52,	-53,	-53,	-53,
-53,	-53,	-54,	-54,	-54,	-54,	-54,	-54,
-55,	-55,	-55,	-55,	-55,	-55,	-56,	-56,
-56,	-56,	-56,	-57,	-57,	-57,	-57,	-57,
-57,	-58,	-58,	-58,	-58,	-58,	-58,	-59,
-59,	-59,	-59,	-59,	-60,	-60,	-60,	-60,
-60,	-60,	-61,	-61,	-61,	-61,	-61,	-61,
-62,	-62,	-62,	-62,	-62,	-62,	-63,	-63,
-63,	-63,	-63,	-63,	-64,	-64,	-64,	-64,
-64,	-64,	-65,	-65,	-65,	-65,	-65,	-66,
-66,	-66,	-66,	-66,	-66,	-67,	-67,	-67,
-67,	-67,	-67,	-68,	-68,	-68,	-68,	-68,
-68,	-69,	-69,	-69,	-69,	-69,	-69,	-69,
-70,	-70,	-70,	-70,	-70,	-70,	-71,	-71,
-71,	-71,	-71,	-71,	-72,	-72,	-72,	-72,
-72,	-72,	-73,	-73,	-73,	-73,	-73,	-73,
-74,	-74,	-74,	-74,	-74,	-74,	-75,	-75,
-75,	-75,	-75,	-75,	-75,	-76,	-76,	-76,
-76,	-76,	-76,	-77,	-77,	-77,	-77,	-77,
-77,	-78,	-78,	-78,	-78,	-78,	-78,	-78,
-79,	-79,	-79,	-79,	-79,	-79,	-80,	-80,
-80,	-80,	-80,	-80,	-80,	-81,	-81,	-81,
-81,	-81,	-81,	-81,	-82,	-82,	-82,	-82,
-82,	-82,	-83,	-83,	-83,	-83,	-83,	-83,
-83,	-84,	-84,	-84,	-84,	-84,	-84,	-84,
-85,	-85,	-85,	-85,	-85,	-85,	-85,	-86,
-86,	-86,	-86,	-86,	-86,	-87,	-87,	-87,
-87,	-87,	-87,	-87,	-88,	-88,	-88,	-88,
-88,	-88,	-88,	-89,	-89,	-89,	-89,	-89,
-89,	-89,	-89,	-90,	-90,	-90,	-90,	-90,
-90,	-90,	-91,	-91,	-91,	-91,	-91,	-91,
-91,	-92,	-92,	-92,	-92,	-92,	-92,	-92,
-93,	-93,	-93,	-93,	-93,	-93,	-93,	-93,
-94,	-94,	-94,	-94,	-94,	-94,	-94,	-95,
-95,	-95,	-95,	-95,	-95,	-95,	-95,	-96,
-96,	-96,	-96,	-96,	-96,	-96,	-96,	-97,
-97,	-97,	-97,	-97,	-97,	-97,	-97,	-98,
-98,	-98,	-98,	-98,	-98,	-98,	-98,	-99,
-99,	-99,	-99,	-99,	-99,	-99,	-99,	-100,
-100,	-100,	-100,	-100,	-100,	-100,	-100,	-101,
-101,	-101,	-101,	-101,	-101,	-101,	-101,	-102,
-102,	-102,	-102,	-102,	-102,	-102,	-102,	-102,
-103,	-103,	-103,	-103,	-103,	-103,	-103,	-103,
-104,	-104,	-104,	-104,	-104,	-104,	-104,	-104,
-104,	-105,	-105,	-105,	-105,	-105,	-105,	-105,
-105,	-105,	-106,	-106,	-106,	-106,	-106,	-106,
-106,	-106,	-106,	-107,	-107,	-107,	-107,	-107,
-107,	-107,	-107,	-107,	-107,	-108,	-108,	-108,
-108,	-108,	-108,	-108,	-108,	-108,	-109,	-109,
-109,	-109,	-109,	-109,	-109,	-109,	-109,	-109,
-110,	-110,	-110,	-110,	-110,	-110,	-110,	-110,
-110,	-110,	-111,	-111,	-111,	-111,	-111,	-111,
-111,	-111,	-111,	-111,	-111,	-112,	-112,	-112,
-112,	-112,	-112,	-112,	-112,	-112,	-112,	-113,
-113,	-113,	-113,	-113,	-113,	-113,	-113,	-113,
-113,	-113,	-114,	-114,	-114,	-114,	-114,	-114,
-114,	-114,	-114,	-114,	-114,	-114,	-115,	-115,
-115,	-115,	-115,	-115,	-115,	-115,	-115,	-115,
-115,	-115,	-116,	-116,	-116,	-116,	-116,	-116,
-116,	-116,	-116,	-116,	-116,	-116,	-117,	-117,
-117,	-117,	-117,	-117,	-117,	-117,	-117,	-117,
-117,	-117,	-117,	-118,	-118,	-118,	-118,	-118,
-118,	-118,	-118,	-118,	-118,	-118,	-118,	-118,
-119,	-119,	-119,	-119,	-119,	-119,	-119,	-119,
-119,	-119,	-119,	-119,	-119,	-119,	-120,	-120,
-120,	-120,	-120,	-120,	-120,	-120,	-120,	-120,
-120,	-120,	-120,	-120,	-120,	-120,	-121,	-121,
-121,	-121,	-121,	-121,	-121,	-121,	-121,	-121,
-121,	-121,	-121,	-121,	-121,	-121,	-122,	-122,
-122,	-122,	-122,	-122,	-122,	-122,	-122,	-122,
-122,	-122,	-122,	-122,	-122,	-122,	-122,	-123,
-123,	-123,	-123,	-123,	-123,	-123,	-123,	-123,
-123,	-123,	-123,	-123,	-123,	-123,	-123,	-123,
-123,	-123,	-123,	-124,	-124,	-124,	-124,	-124,
-124,	-124,	-124,	-124,	-124,	-124,	-124,	-124,
-124,	-124,	-124,	-124,	-124,	-124,	-124,	-124,
-124,	-125,	-125,	-125,	-125,	-125,	-125,	-125,
-125,	-125,	-125,	-125,	-125,	-125,	-125,	-125,
-125,	-125,	-125,	-125,	-125,	-125,	-125,	-125,
-125,	-125,	-125,	-126,	-126,	-126,	-126,	-126,
-126,	-126,	-126,	-126,	-126,	-126,	-126,	-126,
-126,	-126,	-126,	-126,	-126,	-126,	-126,	-126,
-126,	-126,	-126,	-126,	-126,	-126,	-126,	-126,
-126,	-126,	-126,	-126,	-127,	-127,	-127,	-127,
-127,	-127,	-127,	-127,	-127,	-127,	-127,	-127,
-127,	-127,	-127,	-127,	-127,	-127,	-127,	-127,
-127,	-127,	-127,	-127,	-127,	-127,	-127,	-127,
-127,	-127,	-127,	-127,	-127,	-127,	-127,	-127,
-127,	-127,	-127,	-127,	-127,	-127,	-127,	-127,
-127,	-127,	-127,	-127,	-127,	-127,	-127,	-127,
-127,	-127,	-127,	-127,	-127,	-127,	-127,	-127,
-127,	-127,	-127,	-127,	-127,	-127,	-127,	-127,
-127,	-127,	-127,	-127,	-127,	-127,	-127,	-127,
-127,	-127,	-127,	-127,	-127,	-127,	-127,
};

short Sinewave16[N_WAVE - N_WAVE/4] = {
	0,	50,	100,	150,	201,	251,	301,	352,	402,
452,	502,	553,	603,	653,	704,	754,	804,
854,	905,	955,	1005,	1055,	1106,	1156,	1206,
1256,	1307,	1357,	1407,	1457,	1508,	1558,	1608,
1658,	1709,	1759,	1809,	1859,	1909,	1960,	2010,
2060,	2110,	2160,	2211,	2261,	2311,	2361,	2411,
2461,	2512,	2562,	2612,	2662,	2712,	2762,	2812,
2862,	2912,	2963,	3013,	3063,	3113,	3163,	3213,
3263,	3313,	3363,	3413,	3463,	3513,	3563,	3613,
3663,	3713,	3763,	3813,	3863,	3913,	3963,	4013,
4063,	4112,	4162,	4212,	4262,	4312,	4362,	4412,
4461,	4511,	4561,	4611,	4661,	4710,	4760,	4810,
4860,	4909,	4959,	5009,	5058,	5108,	5158,	5207,
5257,	5307,	5356,	5406,	5456,	5505,	5555,	5604,
5654,	5703,	5753,	5802,	5852,	5901,	5951,	6000,
6050,	6099,	6149,	6198,	6247,	6297,	6346,	6395,
6445,	6494,	6543,	6592,	6642,	6691,	6740,	6789,
6839,	6888,	6937,	6986,	7035,	7084,	7133,	7182,
7232,	7281,	7330,	7379,	7428,	7477,	7526,	7574,
7623,	7672,	7721,	7770,	7819,	7868,	7916,	7965,
8014,	8063,	8112,	8160,	8209,	8258,	8306,	8355,
8404,	8452,	8501,	8549,	8598,	8646,	8695,	8743,
8792,	8840,	8889,	8937,	8985,	9034,	9082,	9130,
9179,	9227,	9275,	9323,	9372,	9420,	9468,	9516,
9564,	9612,	9660,	9708,	9756,	9804,	9852,	9900,
9948,	9996,	10044,	10092,	10140,	10188,	10235,	10283,
10331,	10379,	10426,	10474,	10522,	10569,	10617,	10664,
10712,	10759,	10807,	10854,	10902,	10949,	10997,	11044,
11091,	11139,	11186,	11233,	11280,	11328,	11375,	11422,
11469,	11516,	11563,	11610,	11657,	11704,	11751,	11798,
11845,	11892,	11939,	11985,	12032,	12079,	12126,	12172,
12219,	12266,	12312,	12359,	12406,	12452,	12499,	12545,
12592,	12638,	12684,	12731,	12777,	12823,	12870,	12916,
12962,	13008,	13054,	13100,	13147,	13193,	13239,	13285,
13331,	13376,	13422,	13468,	13514,	13560,	13606,	13651,
13697,	13743,	13788,	13834,	13880,	13925,	13971,	14016,
14061,	14107,	14152,	14198,	14243,	14288,	14333,	14379,
14424,	14469,	14514,	14559,	14604,	14649,	14694,	14739,
14784,	14829,	14874,	14918,	14963,	15008,	15053,	15097,
15142,	15186,	15231,	15275,	15320,	15364,	15409,	15453,
15497,	15542,	15586,	15630,	15674,	15719,	15763,	15807,
15851,	15895,	15939,	15983,	16027,	16070,	16114,	16158,
16202,	16245,	16289,	16333,	16376,	16420,	16463,	16507,
16550,	16594,	16637,	16680,	16723,	16767,	16810,	16853,
16896,	16939,	16982,	17025,	17068,	17111,	17154,	17197,
17240,	17282,	17325,	17368,	17410,	17453,	17495,	17538,
17580,	17623,	17665,	17708,	17750,	17792,	17834,	17876,
17919,	17961,	18003,	18045,	18087,	18129,	18170,	18212,
18254,	18296,	18337,	18379,	18421,	18462,	18504,	18545,
18587,	18628,	18670,	18711,	18752,	18793,	18834,	18876,
18917,	18958,	18999,	19040,	19081,	19121,	19162,	19203,
19244,	19284,	19325,	19366,	19406,	19447,	19487,	19528,
19568,	19608,	19649,	19689,	19729,	19769,	19809,	19849,
19889,	19929,	19969,	20009,	20049,	20088,	20128,	20168,
20207,	20247,	20286,	20326,	20365,	20405,	20444,	20483,
20523,	20562,	20601,	20640,	20679,	20718,	20757,	20796,
20835,	20873,	20912,	20951,	20990,	21028,	21067,	21105,
21144,	21182,	21220,	21259,	21297,	21335,	21373,	21411,
21449,	21487,	21525,	21563,	21601,	21639,	21677,	21714,
21752,	21789,	21827,	21864,	21902,	21939,	21977,	22014,
22051,	22088,	22125,	22162,	22199,	22236,	22273,	22310,
22347,	22384,	22420,	22457,	22494,	22530,	22567,	22603,
22640,	22676,	22712,	22748,	22785,	22821,	22857,	22893,
22929,	22965,	23000,	23036,	23072,	23108,	23143,	23179,
23214,	23250,	23285,	23321,	23356,	23391,	23426,	23461,
23497,	23532,	23567,	23601,	23636,	23671,	23706,	23741,
23775,	23810,	23844,	23879,	23913,	23948,	23982,	24016,
24050,	24084,	24118,	24152,	24186,	24220,	24254,	24288,
24322,	24355,	24389,	24423,	24456,	24489,	24523,	24556,
24589,	24623,	24656,	24689,	24722,	24755,	24788,	24821,
24854,	24886,	24919,	24952,	24984,	25017,	25049,	25081,
25114,	25146,	25178,	25210,	25243,	25275,	25307,	25338,
25370,	25402,	25434,	25466,	25497,	25529,	25560,	25592,
25623,	25654,	25686,	25717,	25748,	25779,	25810,	25841,
25872,	25903,	25933,	25964,	25995,	26025,	26056,	26086,
26117,	26147,	26177,	26208,	26238,	26268,	26298,	26328,
26358,	26388,	26417,	26447,	26477,	26506,	26536,	26565,
26595,	26624,	26653,	26683,	26712,	26741,	26770,	26799,
26828,	26857,	26885,	26914,	26943,	26971,	27000,	27028,
27057,	27085,	27113,	27142,	27170,	27198,	27226,	27254,
27282,	27310,	27337,	27365,	27393,	27420,	27448,	27475,
27503,	27530,	27557,	27584,	27611,	27638,	27665,	27692,
27719,	27746,	27773,	27799,	27826,	27852,	27879,	27905,
27932,	27958,	27984,	28010,	28036,	28062,	28088,	28114,
28140,	28166,	28191,	28217,	28242,	28268,	28293,	28319,
28344,	28369,	28394,	28419,	28444,	28469,	28494,	28519,
28544,	28568,	28593,	28617,	28642,	28666,	28691,	28715,
28739,	28763,	28787,	28811,	28835,	28859,	28883,	28906,
28930,	28954,	28977,	29001,	29024,	29047,	29071,	29094,
29117,	29140,	29163,	29186,	29209,	29231,	29254,	29277,
29299,	29322,	29344,	29366,	29389,	29411,	29433,	29455,
29477,	29499,	29521,	29543,	29564,	29586,	29608,	29629,
29651,	29672,	29693,	29714,	29736,	29757,	29778,	29799,
29820,	29840,	29861,	29882,	29902,	29923,	29943,	29964,
29984,	30004,	30025,	30045,	30065,	30085,	30105,	30124,
30144,	30164,	30183,	30203,	30222,	30242,	30261,	30280,
30300,	30319,	30338,	30357,	30376,	30394,	30413,	30432,
30450,	30469,	30487,	30506,	30524,	30542,	30561,	30579,
30597,	30615,	30633,	30650,	30668,	30686,	30703,	30721,
30738,	30756,	30773,	30790,	30808,	30825,	30842,	30859,
30876,	30892,	30909,	30926,	30942,	30959,	30975,	30992,
31008,	31024,	31040,	31056,	31072,	31088,	31104,	31120,
31136,	31151,	31167,	31182,	31198,	31213,	31228,	31244,
31259,	31274,	31289,	31304,	31318,	31333,	31348,	31362,
31377,	31391,	31406,	31420,	31434,	31449,	31463,	31477,
31491,	31504,	31518,	31532,	31546,	31559,	31573,	31586,
31599,	31613,	31626,	31639,	31652,	31665,	31678,	31691,
31703,	31716,	31729,	31741,	31754,	31766,	31778,	31791,
31803,	31815,	31827,	31839,	31851,	31862,	31874,	31886,
31897,	31909,	31920,	31931,	31943,	31954,	31965,	31976,
31987,	31998,	32009,	32019,	32030,	32041,	32051,	32062,
32072,	32082,	32092,	32102,	32112,	32122,	32132,	32142,
32152,	32162,	32171,	32181,	32190,	32199,	32209,	32218,
32227,	32236,	32245,	32254,	32263,	32272,	32280,	32289,
32297,	32306,	32314,	32323,	32331,	32339,	32347,	32355,
32363,	32371,	32378,	32386,	32394,	32401,	32409,	32416,
32423,	32431,	32438,	32445,	32452,	32459,	32466,	32472,
32479,	32486,	32492,	32499,	32505,	32512,	32518,	32524,
32530,	32536,	32542,	32548,	32554,	32559,	32565,	32570,
32576,	32581,	32587,	32592,	32597,	32602,	32607,	32612,
32617,	32622,	32626,	32631,	32636,	32640,	32644,	32649,
32653,	32657,	32661,	32665,	32669,	32673,	32677,	32680,
32684,	32688,	32691,	32695,	32698,	32701,	32704,	32707,
32710,	32713,	32716,	32719,	32722,	32724,	32727,	32729,
32732,	32734,	32736,	32738,	32740,	32742,	32744,	32746,
32748,	32750,	32751,	32753,	32754,	32756,	32757,	32758,
32759,	32760,	32761,	32762,	32763,	32764,	32765,	32765,
32766,	32766,	32767,	32767,	32767,	32767,	32767,	32767,
32767,	32767,	32767,	32767,	32766,	32766,	32765,	32765,
32764,	32763,	32762,	32761,	32760,	32759,	32758,	32757,
32756,	32754,	32753,	32751,	32750,	32748,	32746,	32744,
32742,	32740,	32738,	32736,	32734,	32732,	32729,	32727,
32724,	32722,	32719,	32716,	32713,	32710,	32707,	32704,
32701,	32698,	32695,	32691,	32688,	32684,	32680,	32677,
32673,	32669,	32665,	32661,	32657,	32653,	32649,	32644,
32640,	32636,	32631,	32626,	32622,	32617,	32612,	32607,
32602,	32597,	32592,	32587,	32581,	32576,	32570,	32565,
32559,	32554,	32548,	32542,	32536,	32530,	32524,	32518,
32512,	32505,	32499,	32492,	32486,	32479,	32472,	32466,
32459,	32452,	32445,	32438,	32431,	32423,	32416,	32409,
32401,	32394,	32386,	32378,	32371,	32363,	32355,	32347,
32339,	32331,	32323,	32314,	32306,	32297,	32289,	32280,
32272,	32263,	32254,	32245,	32236,	32227,	32218,	32209,
32199,	32190,	32181,	32171,	32162,	32152,	32142,	32132,
32122,	32112,	32102,	32092,	32082,	32072,	32062,	32051,
32041,	32030,	32019,	32009,	31998,	31987,	31976,	31965,
31954,	31943,	31931,	31920,	31909,	31897,	31886,	31874,
31862,	31851,	31839,	31827,	31815,	31803,	31791,	31778,
31766,	31754,	31741,	31729,	31716,	31703,	31691,	31678,
31665,	31652,	31639,	31626,	31613,	31599,	31586,	31573,
31559,	31546,	31532,	31518,	31504,	31491,	31477,	31463,
31449,	31434,	31420,	31406,	31391,	31377,	31362,	31348,
31333,	31318,	31304,	31289,	31274,	31259,	31244,	31228,
31213,	31198,	31182,	31167,	31151,	31136,	31120,	31104,
31088,	31072,	31056,	31040,	31024,	31008,	30992,	30975,
30959,	30942,	30926,	30909,	30892,	30875,	30859,	30842,
30825,	30808,	30790,	30773,	30756,	30738,	30721,	30703,
30686,	30668,	30650,	30633,	30615,	30597,	30579,	30561,
30542,	30524,	30506,	30487,	30469,	30450,	30432,	30413,
30394,	30376,	30357,	30338,	30319,	30300,	30280,	30261,
30242,	30222,	30203,	30183,	30164,	30144,	30124,	30105,
30085,	30065,	30045,	30025,	30004,	29984,	29964,	29943,
29923,	29902,	29882,	29861,	29840,	29820,	29799,	29778,
29757,	29736,	29714,	29693,	29672,	29651,	29629,	29608,
29586,	29564,	29543,	29521,	29499,	29477,	29455,	29433,
29411,	29389,	29366,	29344,	29322,	29299,	29277,	29254,
29231,	29209,	29186,	29163,	29140,	29117,	29094,	29071,
29047,	29024,	29001,	28977,	28954,	28930,	28906,	28883,
28859,	28835,	28811,	28787,	28763,	28739,	28715,	28691,
28666,	28642,	28617,	28593,	28568,	28544,	28519,	28494,
28469,	28444,	28419,	28394,	28369,	28344,	28319,	28293,
28268,	28242,	28217,	28191,	28166,	28140,	28114,	28088,
28062,	28036,	28010,	27984,	27958,	27932,	27905,	27879,
27852,	27826,	27799,	27773,	27746,	27719,	27692,	27665,
27638,	27611,	27584,	27557,	27530,	27502,	27475,	27448,
27420,	27393,	27365,	27337,	27310,	27282,	27254,	27226,
27198,	27170,	27142,	27113,	27085,	27057,	27028,	27000,
26971,	26943,	26914,	26885,	26857,	26828,	26799,	26770,
26741,	26712,	26683,	26653,	26624,	26595,	26565,	26536,
26506,	26477,	26447,	26417,	26388,	26358,	26328,	26298,
26268,	26238,	26208,	26177,	26147,	26117,	26086,	26056,
26025,	25995,	25964,	25933,	25903,	25872,	25841,	25810,
25779,	25748,	25717,	25686,	25654,	25623,	25592,	25560,
25529,	25497,	25466,	25434,	25402,	25370,	25338,	25307,
25275,	25243,	25210,	25178,	25146,	25114,	25081,	25049,
25017,	24984,	24952,	24919,	24886,	24853,	24821,	24788,
24755,	24722,	24689,	24656,	24623,	24589,	24556,	24523,
24489,	24456,	24423,	24389,	24355,	24322,	24288,	24254,
24220,	24186,	24152,	24118,	24084,	24050,	24016,	23982,
23948,	23913,	23879,	23844,	23810,	23775,	23741,	23706,
23671,	23636,	23601,	23567,	23532,	23497,	23461,	23426,
23391,	23356,	23321,	23285,	23250,	23214,	23179,	23143,
23108,	23072,	23036,	23000,	22965,	22929,	22893,	22857,
22821,	22785,	22748,	22712,	22676,	22640,	22603,	22567,
22530,	22494,	22457,	22420,	22384,	22347,	22310,	22273,
22236,	22199,	22162,	22125,	22088,	22051,	22014,	21977,
21939,	21902,	21864,	21827,	21789,	21752,	21714,	21677,
21639,	21601,	21563,	21525,	21487,	21449,	21411,	21373,
21335,	21297,	21259,	21220,	21182,	21144,	21105,	21067,
21028,	20989,	20951,	20912,	20873,	20835,	20796,	20757,
20718,	20679,	20640,	20601,	20562,	20523,	20483,	20444,
20405,	20365,	20326,	20286,	20247,	20207,	20168,	20128,
20088,	20049,	20009,	19969,	19929,	19889,	19849,	19809,
19769,	19729,	19689,	19648,	19608,	19568,	19528,	19487,
19447,	19406,	19366,	19325,	19284,	19244,	19203,	19162,
19121,	19081,	19040,	18999,	18958,	18917,	18876,	18834,
18793,	18752,	18711,	18669,	18628,	18587,	18545,	18504,
18462,	18421,	18379,	18337,	18296,	18254,	18212,	18170,
18129,	18087,	18045,	18003,	17961,	17919,	17876,	17834,
17792,	17750,	17707,	17665,	17623,	17580,	17538,	17495,
17453,	17410,	17368,	17325,	17282,	17240,	17197,	17154,
17111,	17068,	17025,	16982,	16939,	16896,	16853,	16810,
16767,	16723,	16680,	16637,	16594,	16550,	16507,	16463,
16420,	16376,	16333,	16289,	16245,	16202,	16158,	16114,
16070,	16027,	15983,	15939,	15895,	15851,	15807,	15763,
15719,	15674,	15630,	15586,	15542,	15497,	15453,	15409,
15364,	15320,	15275,	15231,	15186,	15142,	15097,	15053,
15008,	14963,	14918,	14874,	14829,	14784,	14739,	14694,
14649,	14604,	14559,	14514,	14469,	14424,	14379,	14333,
14288,	14243,	14198,	14152,	14107,	14061,	14016,	13971,
13925,	13879,	13834,	13788,	13743,	13697,	13651,	13606,
13560,	13514,	13468,	13422,	13376,	13330,	13285,	13239,
13193,	13146,	13100,	13054,	13008,	12962,	12916,	12870,
12823,	12777,	12731,	12684,	12638,	12591,	12545,	12499,
12452,	12406,	12359,	12312,	12266,	12219,	12172,	12126,
12079,	12032,	11985,	11939,	11892,	11845,	11798,	11751,
11704,	11657,	11610,	11563,	11516,	11469,	11422,	11375,
11327,	11280,	11233,	11186,	11138,	11091,	11044,	10996,
10949,	10902,	10854,	10807,	10759,	10712,	10664,	10617,
10569,	10521,	10474,	10426,	10378,	10331,	10283,	10235,
10187,	10140,	10092,	10044,	9996,	9948,	9900,	9852,
9804,	9756,	9708,	9660,	9612,	9564,	9516,	9468,
9420,	9372,	9323,	9275,	9227,	9179,	9130,	9082,
9034,	8985,	8937,	8889,	8840,	8792,	8743,	8695,
8646,	8598,	8549,	8501,	8452,	8403,	8355,	8306,
8258,	8209,	8160,	8111,	8063,	8014,	7965,	7916,
7868,	7819,	7770,	7721,	7672,	7623,	7574,	7525,
7477,	7428,	7379,	7330,	7281,	7231,	7182,	7133,
7084,	7035,	6986,	6937,	6888,	6839,	6789,	6740,
6691,	6642,	6592,	6543,	6494,	6445,	6395,	6346,
6297,	6247,	6198,	6148,	6099,	6050,	6000,	5951,
5901,	5852,	5802,	5753,	5703,	5654,	5604,	5555,
5505,	5456,	5406,	5356,	5307,	5257,	5207,	5158,
5108,	5058,	5009,	4959,	4909,	4860,	4810,	4760,
4710,	4661,	4611,	4561,	4511,	4461,	4412,	4362,
4312,	4262,	4212,	4162,	4112,	4062,	4013,	3963,
3913,	3863,	3813,	3763,	3713,	3663,	3613,	3563,
3513,	3463,	3413,	3363,	3313,	3263,	3213,	3163,
3113,	3063,	3013,	2963,	2912,	2862,	2812,	2762,
2712,	2662,	2612,	2562,	2511,	2461,	2411,	2361,
2311,	2261,	2211,	2160,	2110,	2060,	2010,	1960,
1909,	1859,	1809,	1759,	1709,	1658,	1608,	1558,
1508,	1457,	1407,	1357,	1307,	1256,	1206,	1156,
1106,	1055,	1005,	955,	905,	854,	804,	754,
703,	653,	603,	553,	502,	452,	402,	351,
301,	251,	201,	150,	100,	50,	0,	-50,
-100,	-150,	-201,	-251,	-301,	-352,	-402,	-452,
-502,	-553,	-603,	-653,	-704,	-754,	-804,	-854,
-905,	-955,	-1005,	-1055,	-1106,	-1156,	-1206,	-1256,
-1307,	-1357,	-1407,	-1457,	-1508,	-1558,	-1608,	-1658,
-1709,	-1759,	-1809,	-1859,	-1909,	-1960,	-2010,	-2060,
-2110,	-2160,	-2211,	-2261,	-2311,	-2361,	-2411,	-2461,
-2512,	-2562,	-2612,	-2662,	-2712,	-2762,	-2812,	-2862,
-2913,	-2963,	-3013,	-3063,	-3113,	-3163,	-3213,	-3263,
-3313,	-3363,	-3413,	-3463,	-3513,	-3563,	-3613,	-3663,
-3713,	-3763,	-3813,	-3863,	-3913,	-3963,	-4013,	-4063,
-4112,	-4162,	-4212,	-4262,	-4312,	-4362,	-4412,	-4461,
-4511,	-4561,	-4611,	-4661,	-4710,	-4760,	-4810,	-4860,
-4909,	-4959,	-5009,	-5059,	-5108,	-5158,	-5208,	-5257,
-5307,	-5356,	-5406,	-5456,	-5505,	-5555,	-5604,	-5654,
-5703,	-5753,	-5802,	-5852,	-5901,	-5951,	-6000,	-6050,
-6099,	-6149,	-6198,	-6247,	-6297,	-6346,	-6395,	-6445,
-6494,	-6543,	-6593,	-6642,	-6691,	-6740,	-6789,	-6839,
-6888,	-6937,	-6986,	-7035,	-7084,	-7133,	-7183,	-7232,
-7281,	-7330,	-7379,	-7428,	-7477,	-7526,	-7574,	-7623,
-7672,	-7721,	-7770,	-7819,	-7868,	-7917,	-7965,	-8014,
-8063,	-8112,	-8160,	-8209,	-8258,	-8306,	-8355,	-8404,
-8452,	-8501,	-8549,	-8598,	-8646,	-8695,	-8743,	-8792,
-8840,	-8889,	-8937,	-8985,	-9034,	-9082,	-9130,	-9179,
-9227,	-9275,	-9323,	-9372,	-9420,	-9468,	-9516,	-9564,
-9612,	-9660,	-9708,	-9756,	-9804,	-9852,	-9900,	-9948,
-9996,	-10044,	-10092,	-10140,	-10188,	-10235,	-10283,	-10331,
-10379,	-10426,	-10474,	-10522,	-10569,	-10617,	-10664,	-10712,
-10759,	-10807,	-10854,	-10902,	-10949,	-10997,	-11044,	-11091,
-11139,	-11186,	-11233,	-11280,	-11328,	-11375,	-11422,	-11469,
-11516,	-11563,	-11610,	-11657,	-11704,	-11751,	-11798,	-11845,
-11892,	-11939,	-11986,	-12032,	-12079,	-12126,	-12173,	-12219,
-12266,	-12312,	-12359,	-12406,	-12452,	-12499,	-12545,	-12592,
-12638,	-12684,	-12731,	-12777,	-12823,	-12870,	-12916,	-12962,
-13008,	-13054,	-13100,	-13147,	-13193,	-13239,	-13285,	-13331,
-13376,	-13422,	-13468,	-13514,	-13560,	-13606,	-13651,	-13697,
-13743,	-13788,	-13834,	-13880,	-13925,	-13971,	-14016,	-14062,
-14107,	-14152,	-14198,	-14243,	-14288,	-14333,	-14379,	-14424,
-14469,	-14514,	-14559,	-14604,	-14649,	-14694,	-14739,	-14784,
-14829,	-14874,	-14918,	-14963,	-15008,	-15053,	-15097,	-15142,
-15186,	-15231,	-15276,	-15320,	-15364,	-15409,	-15453,	-15498,
-15542,	-15586,	-15630,	-15674,	-15719,	-15763,	-15807,	-15851,
-15895,	-15939,	-15983,	-16027,	-16070,	-16114,	-16158,	-16202,
-16245,	-16289,	-16333,	-16376,	-16420,	-16463,	-16507,	-16550,
-16594,	-16637,	-16680,	-16724,	-16767,	-16810,	-16853,	-16896,
-16939,	-16982,	-17025,	-17068,	-17111,	-17154,	-17197,	-17240,
-17282,	-17325,	-17368,	-17410,	-17453,	-17495,	-17538,	-17580,
-17623,	-17665,	-17708,	-17750,	-17792,	-17834,	-17877,	-17919,
-17961,	-18003,	-18045,	-18087,	-18129,	-18170,	-18212,	-18254,
-18296,	-18338,	-18379,	-18421,	-18462,	-18504,	-18545,	-18587,
-18628,	-18670,	-18711,	-18752,	-18793,	-18835,	-18876,	-18917,
-18958,	-18999,	-19040,	-19081,	-19122,	-19162,	-19203,	-19244,
-19285,	-19325,	-19366,	-19406,	-19447,	-19487,	-19528,	-19568,
-19608,	-19649,	-19689,	-19729,	-19769,	-19809,	-19849,	-19889,
-19929,	-19969,	-20009,	-20049,	-20088,	-20128,	-20168,	-20207,
-20247,	-20287,	-20326,	-20365,	-20405,	-20444,	-20483,	-20523,
-20562,	-20601,	-20640,	-20679,	-20718,	-20757,	-20796,	-20835,
-20873,	-20912,	-20951,	-20990,	-21028,	-21067,	-21105,	-21144,
-21182,	-21220,	-21259,	-21297,	-21335,	-21373,	-21411,	-21449,
-21487,	-21525,	-21563,	-21601,	-21639,	-21677,	-21714,	-21752,
-21789,	-21827,	-21865,	-21902,	-21939,	-21977,	-22014,	-22051,
-22088,	-22125,	-22163,	-22200,	-22236,	-22273,	-22310,	-22347,
-22384,	-22421,	-22457,	-22494,	-22530,	-22567,	-22603,	-22640,
-22676,	-22712,	-22748,	-22785,	-22821,	-22857,	-22893,	-22929,
-22965,	-23000,	-23036,	-23072,	-23108,	-23143,	-23179,	-23214,
-23250,	-23285,	-23321,	-23356,	-23391,	-23426,	-23462,	-23497,
-23532,	-23567,	-23602,	-23636,	-23671,	-23706,	-23741,	-23775,
-23810,	-23844,	-23879,	-23913,	-23948,	-23982,	-24016,	-24050,
-24084,	-24118,	-24153,	-24186,	-24220,	-24254,	-24288,	-24322,
-24355,	-24389,	-24423,	-24456,	-24490,	-24523,	-24556,	-24589,
-24623,	-24656,	-24689,	-24722,	-24755,	-24788,	-24821,	-24854,
-24886,	-24919,	-24952,	-24984,	-25017,	-25049,	-25082,	-25114,
-25146,	-25178,	-25210,	-25243,	-25275,	-25307,	-25339,	-25370,
-25402,	-25434,	-25466,	-25497,	-25529,	-25560,	-25592,	-25623,
-25654,	-25686,	-25717,	-25748,	-25779,	-25810,	-25841,	-25872,
-25903,	-25934,	-25964,	-25995,	-26025,	-26056,	-26086,	-26117,
-26147,	-26177,	-26208,	-26238,	-26268,	-26298,	-26328,	-26358,
-26388,	-26417,	-26447,	-26477,	-26506,	-26536,	-26565,	-26595,
-26624,	-26654,	-26683,	-26712,	-26741,	-26770,	-26799,	-26828,
-26857,	-26886,	-26914,	-26943,	-26971,	-27000,	-27028,	-27057,
-27085,	-27113,	-27142,	-27170,	-27198,	-27226,	-27254,	-27282,
-27310,	-27337,	-27365,	-27393,	-27420,	-27448,	-27475,	-27503,
-27530,	-27557,	-27584,	-27611,	-27638,	-27665,	-27692,	-27719,
-27746,	-27773,	-27799,	-27826,	-27852,	-27879,	-27905,	-27932,
-27958,	-27984,	-28010,	-28036,	-28062,	-28088,	-28114,	-28140,
-28166,	-28191,	-28217,	-28242,	-28268,	-28293,	-28319,	-28344,
-28369,	-28394,	-28419,	-28444,	-28469,	-28494,	-28519,	-28544,
-28568,	-28593,	-28617,	-28642,	-28666,	-28691,	-28715,	-28739,
-28763,	-28787,	-28811,	-28835,	-28859,	-28883,	-28906,	-28930,
-28954,	-28977,	-29001,	-29024,	-29047,	-29071,	-29094,	-29117,
-29140,	-29163,	-29186,	-29209,	-29231,	-29254,	-29277,	-29299,
-29322,	-29344,	-29366,	-29389,	-29411,	-29433,	-29455,	-29477,
-29499,	-29521,	-29543,	-29564,	-29586,	-29608,	-29629,	-29651,
-29672,	-29693,	-29715,	-29736,	-29757,	-29778,	-29799,	-29820,
-29840,	-29861,	-29882,	-29902,	-29923,	-29943,	-29964,	-29984,
-30004,	-30025,	-30045,	-30065,	-30085,	-30105,	-30124,	-30144,
-30164,	-30183,	-30203,	-30222,	-30242,	-30261,	-30280,	-30300,
-30319,	-30338,	-30357,	-30376,	-30394,	-30413,	-30432,	-30450,
-30469,	-30488,	-30506,	-30524,	-30542,	-30561,	-30579,	-30597,
-30615,	-30633,	-30650,	-30668,	-30686,	-30703,	-30721,	-30738,
-30756,	-30773,	-30790,	-30808,	-30825,	-30842,	-30859,	-30876,
-30892,	-30909,	-30926,	-30942,	-30959,	-30975,	-30992,	-31008,
-31024,	-31040,	-31056,	-31072,	-31088,	-31104,	-31120,	-31136,
-31151,	-31167,	-31182,	-31198,	-31213,	-31228,	-31244,	-31259,
-31274,	-31289,	-31304,	-31318,	-31333,	-31348,	-31362,	-31377,
-31391,	-31406,	-31420,	-31434,	-31449,	-31463,	-31477,	-31491,
-31504,	-31518,	-31532,	-31546,	-31559,	-31573,	-31586,	-31599,
-31613,	-31626,	-31639,	-31652,	-31665,	-31678,	-31691,	-31704,
-31716,	-31729,	-31741,	-31754,	-31766,	-31778,	-31791,	-31803,
-31815,	-31827,	-31839,	-31851,	-31862,	-31874,	-31886,	-31897,
-31909,	-31920,	-31932,	-31943,	-31954,	-31965,	-31976,	-31987,
-31998,	-32009,	-32019,	-32030,	-32041,	-32051,	-32062,	-32072,
-32082,	-32092,	-32102,	-32112,	-32122,	-32132,	-32142,	-32152,
-32162,	-32171,	-32181,	-32190,	-32199,	-32209,	-32218,	-32227,
-32236,	-32245,	-32254,	-32263,	-32272,	-32280,	-32289,	-32297,
-32306,	-32314,	-32323,	-32331,	-32339,	-32347,	-32355,	-32363,
-32371,	-32379,	-32386,	-32394,	-32401,	-32409,	-32416,	-32423,
-32431,	-32438,	-32445,	-32452,	-32459,	-32466,	-32472,	-32479,
-32486,	-32492,	-32499,	-32505,	-32512,	-32518,	-32524,	-32530,
-32536,	-32542,	-32548,	-32554,	-32559,	-32565,	-32570,	-32576,
-32581,	-32587,	-32592,	-32597,	-32602,	-32607,	-32612,	-32617,
-32622,	-32626,	-32631,	-32636,	-32640,	-32644,	-32649,	-32653,
-32657,	-32661,	-32665,	-32669,	-32673,	-32677,	-32680,	-32684,
-32688,	-32691,	-32695,	-32698,	-32701,	-32704,	-32707,	-32710,
-32713,	-32716,	-32719,	-32722,	-32724,	-32727,	-32729,	-32732,
-32734,	-32736,	-32738,	-32740,	-32742,	-32744,	-32746,	-32748,
-32750,	-32751,	-32753,	-32754,	-32756,	-32757,	-32758,	-32759,
-32760,	-32761,	-32762,	-32763,	-32764,	-32765,	-32765,	-32766,
-32766,	-32767,	-32767,	-32767,	-32767,	-32767,	-32767,
};

/*
  FIX_MPY() - fixed-point multiplication & scaling.
  Substitute inline assembly for hardware-specific
  optimization suited to a particluar DSP processor.
  Scaling ensures that result remains 16-bit.
*/
inline short FIX_MPY(short a, short b)
{
	/* shift right one less bit (i.e. 15-1) */

	//int c = ((int)a * (int)b) >> 14;
	// 7 - 1 = 6
	int c = ((int)a * (int)b) >> 6;

	/* last bit shifted out = rounding-bit */
	//b = c & 0x01;
	//b = c >> 1;
	//b = c & 0x00;
	//b = c >> 1;
	//b = ~b;
	/* last shift + rounding bit */
	//a = (c >> 1) + b;
	a = (c >> 1);

	//a = (c >> 1);
	return a;
}

inline short FIX_MPY16(short a, short b)
{
	/* shift right one less bit (i.e. 15-1) */

	int c = ((int)a * (int)b) >> 14;

	/* last bit shifted out = rounding-bit */
	b = c & 0x01;
	/* last shift + rounding bit */
	a = (c >> 1) + b;
	//a = (c >> 1);
	return a;
}

/*
  fix_fft() - perform forward/inverse fast Fourier transform.
  fr[n],fi[n] are real and imaginary arrays, both INPUT AND
  RESULT (in-place FFT), with 0 <= n < 2**m; set inverse to
  0 for forward transform (FFT), or 1 for iFFT.
*/
int fft(short fr[], short fi[], short m)
{
	int mr, nn, i, j, l, k, istep, n, scale, shift, stage = 0, wscale = 7;
	short qr, qi, tr, ti, wr, wi;

	n = 1 << m;

	/* max FFT size = N_WAVE */
	if (n > N_WAVE)
		return -1;

	mr = 0;
	nn = n - 1;
	scale = 0;

	/* decimation in time - re-order data */
	for (m = 1; m <= nn; ++m) {
		l = n;
		do {
			l >>= 1;
		} while (mr + l > nn);
		mr = (mr & (l - 1)) + l;

		if (mr <= m)
			continue;
		tr = fr[m];
		fr[m] = fr[mr];
		fr[mr] = tr;
		ti = fi[m];
		fi[m] = fi[mr];
		fi[mr] = ti;
	}

	l = 1;
	k = LOG2_N_WAVE - 1;
	while (l < n) {
		shift = 1;
		/*
		  it may not be obvious, but the shift will be
		  performed on each data point exactly once,
		  during this pass.
		*/
		istep = l << 1;
		for (m = 0; m < l; ++m) {
			j = m << k;
			/* 0 <= j < N_WAVE/2 */
			wr = Sinewave[j + N_WAVE / 4]; // >>8 if using int16 table
			wi = -Sinewave[j]; // >>8 if using int16 table

			//if (wscale != 0) {
			//	wr >>= wscale;
			//	wi >>= wscale;
			//	//--wscale;
			//}

			wr >>= 1;
			wi >>= 1;
			for (i = m; i < n; i += istep) {
				j = i + l;
				tr = FIX_MPY(wr, fr[j]) - FIX_MPY(wi, fi[j]);
				ti = FIX_MPY(wr, fi[j]) + FIX_MPY(wi, fr[j]);
				qr = fr[i];
				qi = fi[i];
				/*if (shift) {
					qr >>= 1;
					qi >>= 1;
				}*/

				qr >>= 1;
				qi >>= 1;
				/*if (stage >= 7) {
					qr >>= 1;
					qi >>= 1;
				}*/
				fr[j] = qr - tr;
				fi[j] = qi - ti;
				fr[i] = qr + tr;
				fi[i] = qi + ti;
			}
		}
		--k;
		++stage;
		--wscale;
		l = istep;
	}

	// scaling to make pure spectre after fft
	/*for (int i = 0; i < N_WAVE; ++i) {
		fr[i] -= 2;
		fi[i] -= 2;
		if (fr[i] < 0)
			fr[i] = 0;
		if (fi[i] < 0)
			fi[i] = 0;
		if (fr[i] != 0)
			fr[i] += 3;
		if (fi[i] != 0)
			fi[i] += 3;
	}*/
	/*for (int i = 0; i < N_WAVE; ++i) {
		fr[i] -= 3798;
		fi[i] -= 3798;
		if (fr[i] < 0)
			fr[i] = 0;
		if (fi[i] < 0)
			fi[i] = 0;
		if (fr[i] != 0)
			fr[i] += 3798;
		if (fi[i] != 0)
			fi[i] += 3798;
	}*/

	for (int i = 0; i < N_WAVE; ++i) {
		fr[i] -= 2;
		fi[i] -= 2;
		if (fr[i] < 0)
			fr[i] = 0;
		if (fi[i] < 0)
			fi[i] = 0;
		if (fr[i] != 0)
			fr[i] += 8;
		if (fi[i] != 0)
			fi[i] += 1;
	}

	return scale;
}

int ifft(short fr[], short fi[], short m)
{
	int mr, nn, i, j, l, k, istep, n, scale, shift;
	short qr, qi, tr, ti, wr, wi, checkshift = 0;

	n = 1 << m;

	/* max FFT size = N_WAVE */
	if (n > N_WAVE)
		return -1;

	mr = 0;
	nn = n - 1;
	scale = 0;

	/* decimation in time - re-order data */
	for (m = 1; m <= nn; ++m) {
		l = n;
		do {
			l >>= 1;
		} while (mr + l > nn);
		mr = (mr & (l - 1)) + l;

		if (mr <= m)
			continue;
		tr = fr[m];
		fr[m] = fr[mr];
		fr[mr] = tr;
		ti = fi[m];
		fi[m] = fi[mr];
		fi[mr] = ti;
	}

	l = 1;
	k = LOG2_N_WAVE - 1;
	while (l < n) {
		shift = 0;
		for (i = 0; i < n; ++i) {
			j = fr[i];
			if (j < 0)
				j = -j;
			m = fi[i];
			if (m < 0)
				m = -m;
			if (j > 127 || m > 127)
				checkshift = 1; // если сдвигать на 7 массив со значениями меньше 2^7, то на выходе получатся 0 и -1
			if (j > 16383 || m > 16383) {
				shift = 1;
				break;
			}
		}
		if (shift)
			++scale;
		/*
		  it may not be obvious, but the shift will be
		  performed on each data point exactly once,
		  during this pass.
		*/
		istep = l << 1;
		for (m = 0; m < l; ++m) {
			j = m << k;
			/* 0 <= j < N_WAVE/2 */
			wr = Sinewave16[j + N_WAVE / 4];
			wi = Sinewave16[j]; // -
			//wi = -wi;
			if (shift) {
				wr >>= 1;
				wi >>= 1;
			}
			for (i = m; i < n; i += istep) {
				j = i + l;
				tr = FIX_MPY16(wr, fr[j]) - FIX_MPY16(wi, fi[j]);
				ti = FIX_MPY16(wr, fi[j]) + FIX_MPY16(wi, fr[j]);
				qr = fr[i];
				qi = fi[i];
				if (shift) {
					qr >>= 1;
					qi >>= 1;
				}
				fr[j] = qr - tr;
				fi[j] = qi - ti;
				fr[i] = qr + tr;
				fi[i] = qi + ti;
			}
		}
		--k;
		l = istep;
	}
	if (checkshift)
		for (i = 0; i < N_WAVE; ++i) {
			fr[i] >>= 7;
			fi[i] >>= 7;
		}
	return scale;
}





int main()
{
	vector<complex<int8_t>> signal;
	const int N = 4096; // 1024 changed to 4096
	const double Fs = 16000;
	short real[N];
	short imag[N];
	short signalarr[N];
	signal.resize(N);
	ofstream signalb4("signalb4.txt");
	string pls = "";
	complex<double> jj(0.0, 1.0);
	for (int i = 0; i < N; ++i) {
		signal[i] = 127. * cos(2 * M_PI * 1000 * i / Fs);
		//signal[i] = 127. * exp(2 * M_PI * 1000 * i / Fs * jj);
		signalarr[i] = signal[i].real();
		real[i] = signal[i].real();
		imag[i] = signal[i].imag();
		imag[i] >= 0 ? pls = "+" : pls = "";
		signalb4 << i << "\t" << real[i] << pls << imag[i] << "i" << endl;
	}
	signalb4.close();

	/*int freq = 1000 / Fs * N;
	short rc[N] = {};
	rc[freq] = 18000;
	short ic[N] = {};
	ifft(rc, ic, 12);
	ofstream check("check.txt");
	for (int i = 0; i < N; ++i) {
		ic[i] >= 0 ? pls = "+" : pls = "";
		check << i << "\t" << rc[i] << pls << ic[i] << "i" << endl;
	}
	check.close();*/

	double summb4 = 0;
	short realb4[N];
	short imagb4[N];
	for (int i = 0; i < N_WAVE; ++i) {
		realb4[i] = real[i];
		imagb4[i] = imag[i];
	}

	fft(real, imag, 12);
	ifft(real, imag, 12);

	ofstream spectreout("spectre.txt");
	ofstream signalout("signal.txt");

	double nf;
	int temp;
	double summ = 0;
	double summc = 0;
	for (int i = 0; i < N; ++i) {
		i < N / 2 ? temp = i + (double)N / 2. : temp = i - (double)N / 2.;
		nf = Fs / (double)N * ((double)i - (double)N / 2.);
		imag[i] >= 0 ? pls = "+" : pls = "";
		spectreout << nf << "\t" << (int)sqrt(pow(real[temp], 2) + pow(imag[temp], 2)) << endl;
		signalout << i << "\t" << real[i] << pls << imag[i] << "i" << endl;
		summ += pow(real[i], 2) + pow(imag[i], 2);
		summc += pow(realb4[i], 2) + pow(imagb4[i], 2);
		summb4 += pow(realb4[i] - real[i], 2) + pow(imagb4[i] - imag[i], 2);
	}
	spectreout.close();
	signalout.close();
	double dP = summb4 / (double)N;
	cout << dP << endl;
	double Pz = summ / (double)N; // условие: Pz и Pc должны быть равны
	cout << Pz << endl;
	double Pc = summc / (double)N;
	cout << Pc << endl;
	//double deltaP = 10. * log10(dP / 495.5);
	double deltaP = 10. * log10(dP / Pz); // считаем отношение в децибелах
	cout << deltaP << endl;




	// Открываем файл для чтения
	//std::ifstream file("BtB_OSNR_16.9332_dB.h5_H_cint8_B0.49989_mean=32_max=72.7803.pcm", std::ios::binary);
	std::ifstream file("test_cint8.pcm", std::ios::binary);

	// Проверяем, что файл успешно открыт
	if (!file)
	{
		std::cerr << "Failed to open file" << std::endl;
		return 1;
	}

	// Получаем размер файла
	//file.seekg(0, std::ios::end);
	//std::streampos file_size = file.tellg();
	//file.seekg(0, std::ios::beg);
	std::streampos file_size = N * 2;

	// Вычисляем количество комплексных чисел в файле
	int num_complex_numbers = file_size / 2;

	// Создаем буфер для чтения данных из файла
	//vector<complex<double>> buffer;
	//buffer.resize(num_complex_numbers);
	std::complex<int8_t>* buffer = new std::complex<int8_t>[num_complex_numbers];

	// Читаем данные из файла в буфер
	file.read((char*)buffer, file_size);


	/*if (file.gcount() != file_size)
	{
		std::cerr << "Failed to read data from file" << std::endl;
		return 1;
	}*/

	vector<complex<double>> buffer_vector;
	buffer_vector.resize(num_complex_numbers);
	ofstream check_pcm("check_pcm.txt");
	int realmax1 = 0;
	int realmin1 = 0;
	int imagmax1 = 0;
	int imagmin1 = 0;


	short realpcm[N];
	short imagpcm[N];
	for (int i = 0; i < N / 2; i++)
	{
		//std::cout << buffer[i] << std::endl;
		buffer_vector[i] = (complex<int>)buffer[i];
		realpcm[i] = (int)buffer_vector[i].real();
		imagpcm[i] = (int)buffer_vector[i].imag();
		//check_pcm << (complex<int>)buffer[i] << endl;
		/*if (buffer_vector[i].real() > realmax1)
			realmax1 = buffer_vector[i].real();
		if (buffer_vector[i].imag() > imagmax1)
			imagmax1 = buffer_vector[i].imag();
		if (buffer_vector[i].real() < realmin1)
			realmin1 = buffer_vector[i].real();
		if (buffer_vector[i].imag() < imagmin1)
			imagmin1 = buffer_vector[i].imag();*/
	}
	check_pcm.close();
	//cout << realmax1 << "\t" << realmin1 << "\n" << imagmax1 << "\t" << imagmin1 << endl;

	ofstream spoutb4("sinespectreb4.txt");
	double summpcmb4 = 0;
	short realpcmb4[N], imagpcmb4[N];
	for (int i = 0; i < N; ++i) {
		realpcmb4[i] = realpcm[i];
		imagpcmb4[i] = imagpcm[i];
		imagpcm[i] >= 0 ? pls = "+" : pls = "";
		spoutb4 << i << "\t" << (int)realpcm[i] << pls << (int)imagpcm[i] << "i" << endl;
		summpcmb4 += pow(realpcm[i], 2) + pow(imagpcm[i], 2);
	}
	spoutb4.close();

	fft(realpcm, imagpcm, 12);




	// Освобождаем ресурсы
	delete[] buffer;
	file.close();


	ofstream spout("sinespectre.txt");
	//double nf;
	//int temp;
	for (int i = 0; i < N; ++i) {
		i < N / 2 ? temp = i + N / 2 : temp = i - N / 2;
		nf = Fs / N * (i - N / 2);
		//spout << nf << "\t" << abs(buffer_vector[temp]) << endl;
		spout << nf << "\t" << (int)sqrt(pow(realpcm[temp], 2) + pow(imagpcm[temp], 2)) << endl;
	}
	spout.close();

	ifft(realpcm, imagpcm, 12);

	ofstream spoutifft("sinespectrei.txt");
	double summpcmafter = 0;
	double summpcmdp = 0;
	for (int i = 0; i < N; ++i) {
		imagpcm[i] >= 0 ? pls = "+" : pls = "";
		spoutifft << i << "\t" << (int)realpcm[i] << pls << (int)imagpcm[i] << "i" << endl;
		summpcmafter += pow(realpcm[i], 2) + pow(imagpcm[i], 2);
		summpcmdp += pow(realpcmb4[i] - realpcm[i], 2) + pow(imagpcmb4[i] - imagpcm[i], 2);
	}
	spoutifft.close();
	cout << "PCM" << endl;
	double Pcpcm = summpcmb4 / (double)N;
	double Pzpcm = summpcmafter / (double)N;
	double dPpcm = summpcmdp / (double)N;
	cout << Pcpcm << "\t" << Pzpcm << endl;
	cout << dPpcm << endl;
	double deltaPpcm = 10. * log10(Pzpcm / dPpcm); // считаем отношение в децибелах
	cout << deltaPpcm << endl;


	//delete[] valuec;
	//check_max.close();


	// Открытие файла для чтения
	ifstream filedat("IFFT_result_all_x1_8.dat", ios::binary);
	if (!filedat)
	{
		cerr << "Не удалось открыть файл" << endl;
		return 1;
	}

	// Чтение комплексных чисел из файла
	//complex<int8_t> num;
	complex<int16_t> num;
	short real_part[N], imag_part[N];
	int itt = 0;
	ofstream dat("dat.txt");
	while (filedat.read(reinterpret_cast<char*>(&num), sizeof(num)))
	{
		real_part[itt] = static_cast<short>(num.real());
		imag_part[itt] = static_cast<short>(num.imag());
		//cout << "Действительная часть: " << real_part << ", мнимая часть: " << imag_part << endl;
		//imag_part[itt] >= 0 ? pls = "+" : pls = "";
		//dat << itt << "\t" << real_part[itt] << pls << imag_part[itt] << "i" << endl;
		//i < N / 2 ? temp = i + N / 2 : temp = i - N / 2;
		//nf = Fs / N * (i - N / 2);
		//spout << nf << "\t" << abs(buffer_vector[temp]) << endl;
		//spout << nf << "\t" << (int)sqrt(pow(realpcm[temp], 2) + pow(imagpcm[temp], 2)) << endl;
		//dat << Fs / N * (itt - N / 2) << "\t" << (int)sqrt(pow(real_part[(itt < N / 2 ? itt + N / 2 : itt - N / 2)], 2) + pow(imag_part[(itt < N / 2 ? itt + N / 2 : itt - N / 2)], 2)) << endl;
		++itt;
	}
	for (int i = 0; i < N; ++i) {
		imag_part[i] >= 0 ? pls = "+" : pls = "";
		dat << i << "\t" << real_part[i] << pls << imag_part[i] << "i" << endl;
		//dat << Fs / N * (i - N / 2) << "\t" << (int)sqrt(pow(real_part[(i < N / 2 ? i + N / 2 : i - N / 2)], 2) + pow(imag_part[(i < N / 2 ? i + N / 2 : i - N / 2)], 2)) << endl;
	}

	// Закрытие файла
	filedat.close();
	dat.close();


	std::system("pause");
}







